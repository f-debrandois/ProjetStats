install.packages('IRkernel')  # Don’t forget step 2/3!
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
IRkernel::installspec()
install.packages("FactoMineR")
library(ggplot2)
library(tidyr)
help(tidyverse)
??tidyverse
help(rnorm)
help(factoMineR)
help(FactoMineR)
getwd
getwd()
install.packages(c("FactoMineR", "gridExtra", "plotly", "questionr", "corrplot"))
install.packages(c("questionr", "FactoMineR"))
install.packages(c("questionr", "FactoMineR"), dependencies = FALSE)
help("questionr")
help(questionr)
help(corrplot)
install.packages("tidyverse")
install.packages("tidyverse")
library(FactoMineR)
install.packages("FactoMineR")
library(corrplot)
library(plotly)
library(questionr)
install.packages("~/Téléchargements/FactoMineR_2.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/FactoMineR_2.8.tar.gz", repos = NULL, type = "source")
library(FactoMineR)
ls("package:drc")
ls("package:corrplot")
install.packages("car", dependencies = FALSE)
install.packages("car")
install.packages("reshape2")
library(reshape2)
install.packages("knitr")
install.packages("knitr")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("systemfonts", dependencies = TRUE)
install.packages("tidyverse")
install.packages("textshaping", dependencies = TRUE)
install.packages("tidyverse")
install.packages("ragg")
install.packages("rvst")
install.packages("ggplot2")
install.packages("dpylr")
install.packages("dplyr")
install.packages("xml2")
install.packages("tidyverse")
install.packages("ragg")
install.packages("ragg")
install.packages("tidyverse")
?as.factor
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(n, m, sqrt(sigma2)) # echantillon simule
pval = test.moy1(x,sigma2,m0,alternative="greater") # en utilisant test.moy1
nb.rejets = nb.rejets + (pval < alpha) # A COMPLETER
}
return(nb.rejets/K)
}
install.packages("ellipse")
install.packages("leaps")
install.packages("MASS")
install.packages("corrplot")
install.packages("glmnet")
install.packages("coefplot")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("ggfortify")
install.packages("plotly")
install.packages("reshape2")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(gridExtra)
data = read.csv("Data-projetmodIA-2324.csv")
g1= ggplot(data = data) + geom_histogram(aes(x = scale(nox_kg)))
g2= ggplot(data = data) + geom_histogram(aes(scale(x = so2_kg)))
g3= ggplot(data = data) + geom_histogram(aes(scale(x = pm10_kg)))
g4= ggplot(data = data) + geom_histogram(aes(scale(x = pm25_kg)))
g5= ggplot(data = data) + geom_histogram(aes(scale(x = co_kg)))
g6= ggplot(data = data) + geom_histogram(aes(scale(x = c6h6_kg)))
g7= ggplot(data = data) + geom_histogram(aes(scale(x = ges_teqco2)))
g8= ggplot(data = data) + geom_histogram(aes(scale(x = ch4_t)))
g9= ggplot(data = data) + geom_histogram(aes(scale(x = co2_t)))
g10= ggplot(data = data) + geom_histogram(aes(scale(x = n2o_t)))
g11= ggplot(data = data) + geom_histogram(aes(scale(x = nh3_kg)))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x = scale(nox_kg)))
g2= ggplot(data = data) + geom_histogram(aes(scale(x = so2_kg)))
g3= ggplot(data = data) + geom_histogram(aes(scale(x = pm10_kg)))
g4= ggplot(data = data) + geom_histogram(aes(scale(x = pm25_kg)))
g5= ggplot(data = data) + geom_histogram(aes(scale(x = co_kg)))
g6= ggplot(data = data) + geom_histogram(aes(scale(x = c6h6_kg)))
g7= ggplot(data = data) + geom_histogram(aes(scale(x = ges_teqco2)))
g8= ggplot(data = data) + geom_histogram(aes(scale(x = ch4_t)))
g9= ggplot(data = data) + geom_histogram(aes(scale(x = co2_t)))
g10= ggplot(data = data) + geom_histogram(aes(scale(x = n2o_t)))
g11= ggplot(data = data) + geom_histogram(aes(scale(x = nh3_kg)))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x = scale(nox_kg)))
g2= ggplot(data = data) + geom_histogram(aes(x = scale(so2_kg)))
g3= ggplot(data = data) + geom_histogram(aes(x = scale(pm10_kg)))
g4= ggplot(data = data) + geom_histogram(aes(x = scale(pm25_kg)))
g5= ggplot(data = data) + geom_histogram(aes(x = scale(co_kg)))
g6= ggplot(data = data) + geom_histogram(aes(x = scale(c6h6_kg)))
g7= ggplot(data = data) + geom_histogram(aes(x = scale(ges_teqco2)))
g8= ggplot(data = data) + geom_histogram(aes(x = scale(ch4_t)))
g9= ggplot(data = data) + geom_histogram(aes(x = scale(co2_t)))
g10= ggplot(data = data) + geom_histogram(aes(x = scale(n2o_t)))
g11= ggplot(data = data) + geom_histogram(aes(x = scale(nh3_kg)))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x=log(scale(nox_kg))))
g2= ggplot(data = data) + geom_histogram(aes(log(scale(x = so2_kg))))
g3= ggplot(data = data) + geom_histogram(aes(log(scale(x = pm10_kg))))
g4= ggplot(data = data) + geom_histogram(aes(log(scale(x = pm25_kg))))
g5= ggplot(data = data) + geom_histogram(aes(log(scale(x = co_kg))))
g6= ggplot(data = data) + geom_histogram(aes(log(scale(x = c6h6_kg))))
g7= ggplot(data = data) + geom_histogram(aes(log(scale(x = ges_teqco2))))
g8= ggplot(data = data) + geom_histogram(aes(log(scale(x = ch4_t))))
g9= ggplot(data = data) + geom_histogram(aes(log(scale(x = co2_t))))
g10= ggplot(data = data) + geom_histogram(aes(log(scale(x = n2o_t))))
g11= ggplot(data = data) + geom_histogram(aes(log(scale(x = nh3_kg))))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x=log(scale(nox_kg))))
g2= ggplot(data = data) + geom_histogram(aes(x = log(scale(so2_kg))))
g3= ggplot(data = data) + geom_histogram(aes(x = log(scale(pm10_kg))))
g4= ggplot(data = data) + geom_histogram(aes(x = log(scale(pm25_kg))))
g5= ggplot(data = data) + geom_histogram(aes(x = log(scale(co_kg))))
g6= ggplot(data = data) + geom_histogram(aes(x = log(scale(c6h6_kg))))
g7= ggplot(data = data) + geom_histogram(aes(x = log(scale(ges_teqco2))))
g8= ggplot(data = data) + geom_histogram(aes(x = log(scale(ch4_t))))
g9= ggplot(data = data) + geom_histogram(aes(x = log(scale(co2_t))))
g10= ggplot(data = data) + geom_histogram(aes(x = log(scale(n2o_t))))
g11= ggplot(data = data) + geom_histogram(aes(x = log(scale(nh3_kg))))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x=scale(log(nox_kg))))
g2= ggplot(data = data) + geom_histogram(aes(x = scale(log(so2_kg))))
g3= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm10_kg))))
g4= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm25_kg))))
g5= ggplot(data = data) + geom_histogram(aes(x = scale(log(co_kg))))
g6= ggplot(data = data) + geom_histogram(aes(x = scale(log(c6h6_kg))))
g7= ggplot(data = data) + geom_histogram(aes(x = scale(log(ges_teqco2))))
g8= ggplot(data = data) + geom_histogram(aes(x = scale(log(ch4_t))))
g9= ggplot(data = data) + geom_histogram(aes(x = scale(log(co2_t))))
g10= ggplot(data = data) + geom_histogram(aes(x = scale(log(n2o_t))))
g11= ggplot(data = data) + geom_histogram(aes(x = scale(log(nh3_kg))))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
dataModif=scale(log(data))
dataModif=data-data(lib_epci)
dataModif=data-data[lib_epci]
#dataModif=data-data[lib_epci]
dataModif=scale(log(data))
dataModif=data - data$lib_epci - data$TypeEPCI - data$nomdepart
dataModif=subset(data, select=-lib_epci -TypeEPCI -nomdepart)
dataModif=scale(log(dataModif))
dataModif=data
dataModif$lib_epci = NULL
dataModif$TypeEPCI = NULL
dataModif$nomdepart = NULL
dataModif=scale(log(dataModif))
g1= ggplot(data = dataModif) + geom_histogram(aes(x = nox_kg))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(gridExtra)
data = read.csv("Data-projetmodIA-2324.csv")
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(data)
data[1,]
g10 = ggplot(data2019, aes(x = TypeEPCI, y = n2o_t)) + geom_boxplot()
g11 = ggplot(data2019, aes(x = TypeEPCI, y = nh3_kg)) + geom_boxplot()
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(gridExtra)
data = read.csv("Data-projetmodIA-2324.csv")
summary(data)
data[1,]
boxplot(data$nox_kg)
boxplot(data$nox_kg[1:164])
boxplot(data$so2_kg)
boxplot(data$pm10_kg)
boxplot(data$pm25_kg)
boxplot(data$co_kg)
boxplot(data$c6h6_kg)
boxplot(data$nh3_kg)
boxplot(data$ges_teqco2)
boxplot(data$ch4_t)
boxplot(data$co2_t)
boxplot(data$n2o_t)
data2019= data[1:164,]
g1 = ggplot(data2019, aes(x = TypeEPCI, y = nox_kg)) + geom_boxplot()
g2 = ggplot(data2019, aes(x = TypeEPCI, y = so2_kg)) + geom_boxplot()
g3 = ggplot(data2019, aes(x = TypeEPCI, y = pm10_kg)) + geom_boxplot()
g4 = ggplot(data2019, aes(x = TypeEPCI, y = pm25_kg)) + geom_boxplot()
g5 = ggplot(data2019, aes(x = TypeEPCI, y = co_kg)) + geom_boxplot()
g6 = ggplot(data2019, aes(x = TypeEPCI, y = c6h6_kg)) + geom_boxplot()
g7 = ggplot(data2019, aes(x = TypeEPCI, y = ges_teqco2)) + geom_boxplot()
g8 = ggplot(data2019, aes(x = TypeEPCI, y = ch4_t)) + geom_boxplot()
g9 = ggplot(data2019, aes(x = TypeEPCI, y = co2_t)) + geom_boxplot()
g10 = ggplot(data2019, aes(x = TypeEPCI, y = n2o_t)) + geom_boxplot()
g11 = ggplot(data2019, aes(x = TypeEPCI, y = nh3_kg)) + geom_boxplot()
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x = nox_kg))
g2= ggplot(data = data) + geom_histogram(aes(x = so2_kg))
g3= ggplot(data = data) + geom_histogram(aes(x = pm10_kg))
g4= ggplot(data = data) + geom_histogram(aes(x = pm25_kg))
g5= ggplot(data = data) + geom_histogram(aes(x = co_kg))
g6= ggplot(data = data) + geom_histogram(aes(x = c6h6_kg))
g7= ggplot(data = data) + geom_histogram(aes(x = ges_teqco2))
g8= ggplot(data = data) + geom_histogram(aes(x = ch4_t))
g9= ggplot(data = data) + geom_histogram(aes(x = co2_t))
g10= ggplot(data = data) + geom_histogram(aes(x = n2o_t))
g11= ggplot(data = data) + geom_histogram(aes(x = nh3_kg))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x = scale(nox_kg)))
g2= ggplot(data = data) + geom_histogram(aes(x = scale(so2_kg)))
g3= ggplot(data = data) + geom_histogram(aes(x = scale(pm10_kg)))
g4= ggplot(data = data) + geom_histogram(aes(x = scale(pm25_kg)))
g5= ggplot(data = data) + geom_histogram(aes(x = scale(co_kg)))
g6= ggplot(data = data) + geom_histogram(aes(x = scale(c6h6_kg)))
g7= ggplot(data = data) + geom_histogram(aes(x = scale(ges_teqco2)))
g8= ggplot(data = data) + geom_histogram(aes(x = scale(ch4_t)))
g9= ggplot(data = data) + geom_histogram(aes(x = scale(co2_t)))
g10= ggplot(data = data) + geom_histogram(aes(x = scale(n2o_t)))
g11= ggplot(data = data) + geom_histogram(aes(x = scale(nh3_kg)))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
g1= ggplot(data = data) + geom_histogram(aes(x=scale(log(nox_kg))))
g2= ggplot(data = data) + geom_histogram(aes(x = scale(log(so2_kg))))
g3= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm10_kg))))
g4= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm25_kg))))
g5= ggplot(data = data) + geom_histogram(aes(x = scale(log(co_kg))))
g6= ggplot(data = data) + geom_histogram(aes(x = scale(log(c6h6_kg))))
g7= ggplot(data = data) + geom_histogram(aes(x = scale(log(ges_teqco2))))
g8= ggplot(data = data) + geom_histogram(aes(x = scale(log(ch4_t))))
g9= ggplot(data = data) + geom_histogram(aes(x = scale(log(co2_t))))
g10= ggplot(data = data) + geom_histogram(aes(x = scale(log(n2o_t))))
g11= ggplot(data = data) + geom_histogram(aes(x = scale(log(nh3_kg))))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
setwd("~/Documents/Cours/4ModIA/ProjetStats")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(gridExtra)
data = read.csv("Data-projetmodIA-2324.csv")
library("MASS")
sang.lda <- lda(Catégories~. ,data=compilation)
g1= ggplot(data = data) + geom_histogram(aes(x=scale(log(nox_kg))))
g2= ggplot(data = data) + geom_histogram(aes(x = scale(log(so2_kg))))
g3= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm10_kg))))
g4= ggplot(data = data) + geom_histogram(aes(x = scale(log(pm25_kg))))
g5= ggplot(data = data) + geom_histogram(aes(x = scale(log(co_kg))))
g6= ggplot(data = data) + geom_histogram(aes(x = scale(log(c6h6_kg))))
g7= ggplot(data = data) + geom_histogram(aes(x = scale(log(ges_teqco2))))
g8= ggplot(data = data) + geom_histogram(aes(x = scale(log(ch4_t))))
g9= ggplot(data = data) + geom_histogram(aes(x = scale(log(co2_t))))
g10= ggplot(data = data) + geom_histogram(aes(x = scale(log(n2o_t))))
g11= ggplot(data = data) + geom_histogram(aes(x = scale(log(nh3_kg))))
grid.arrange(g1, g2, g3, g4, g5, g6, g11, g7, g8, g9, g10, ncol = 3)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
library("MASS")
summary(dlog)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
summary(dlog)
library("MASS")
lda_data <- lda(TypeEPCI~. ,data=dlog)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
summary(dlog)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
data_quant+=dlog[15]
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
data_quant$TypeEPCI=dlog[15]
summary(data_quant)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
data_quant$TypeEPCI=dlog$TypeEPCI
summary(data_quant)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
dlog=data
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[4:14]=data_quant
data_quant$TypeEPCI=dlog$TypeEPCI
summary(data_quant)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=data_quant)
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:10]=data_quant
summary(dlog)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=data_quant)
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
summary(dlog)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=data_quant)
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
summary(dlog)
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
lda_data
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
lda_data
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
D1 <- lda_data$scaling[,1] # vecteur 1
D2 <- lda_data$scaling[,2] # vecteur 2
# Calcul de projeté des individus sur D1 et D2
xy <- as.matrix(dlog[,-1])%*%as.matrix(cbind(D1,D2))
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
D1 <- lda_data$scaling[,1] # vecteur 1
D2 <- lda_data$scaling[,2] # vecteur 2
# Calcul de projeté des individus sur D1 et D2
xy <- as.matrix(dlog[,-12])%*%as.matrix(cbind(D1,D2))
plot(xy,pch=16 )
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
D1 <- lda_data$scaling[,1] # vecteur 1
D2 <- lda_data$scaling[,2] # vecteur 2
# Calcul de projeté des individus sur D1 et D2
xy <- as.matrix(dlog[,-12])%*%as.matrix(cbind(D1,D2))
color <- TypeEPCI ;color[color=="CC"] <- "black"
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
D1 <- lda_data$scaling[,1] # vecteur 1
D2 <- lda_data$scaling[,2] # vecteur 2
# Calcul de projeté des individus sur D1 et D2
xy <- as.matrix(dlog[,-12])%*%as.matrix(cbind(D1,D2))
color <- dlog$TypeEPCI ;color[color=="CC"] <- "black"
color[color=="CA"] <- "red";color[color=="CU"] <- "green"; color[color=="Metropole"] <- "blue"
plot(xy,col=color,pch=16 )
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
lda_data <- lda(TypeEPCI ~. ,data=dlog)
D1 <- lda_data$scaling[,1] # vecteur 1
D2 <- lda_data$scaling[,2] # vecteur 2
# Calcul de projeté des individus sur D1 et D2
x <- as.matrix(dlog[,-12])%*%as.matrix(cbind(D1,D2))
cov_matrix <- cov(x)
inv_sqrt_cov_matrix <- solve(sqrtm(cov_matrix))
install.packages("Matrix")
install.packages("Matrix")
dlog=data[4:15]
data_quant=data[4:14]
data_quant=scale(log(data_quant))
dlog[1:11]=data_quant
library("MASS")
library("Matrix")
